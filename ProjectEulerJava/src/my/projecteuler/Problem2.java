package my.projecteuler;

import static java.util.stream.Collectors.summingInt;

import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Predicate;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

/**
 * <h1><a href="http://projecteuler.net/problem=2">Even Fibonacci numbers.</a></h1>
 * 
 * <p>
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be: <br>
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * </p>
 * <p>
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 * </p>
 */
public class Problem2 {
	public static void main(String[] args) {
		int maxValue = 4_000_000;
		int sum = fibonacci(doNotExceed(maxValue)).filter(isEven()).collect(
				summingInt(v -> v));
		System.out.println("result " + sum);
	}

	private static Predicate<Integer> doNotExceed(int maxValue) {
		return v -> v <= maxValue;
	}

	private static Predicate<? super Integer> isEven() {
		return v -> v % 2 == 0;
	}

	public static Stream<Integer> fibonacci(
			final Predicate<Integer> continuationCondition) {
		Iterator<Integer> fibonacciIterator = new Iterator<Integer>() {
			private int previousOfPrevious = -1;
			private int previous = -1;

			@Override
			public boolean hasNext() {
				return continuationCondition.test(calculateNext());
			}

			@Override
			public Integer next() {
				int result = calculateNext();
				previousOfPrevious = previous;
				previous = result;
				return result;
			}

			private int calculateNext() {
				if (previous == -1) {
					return 1;
				}
				if (previousOfPrevious == -1) {
					return 2;
				}
				return previousOfPrevious + previous;
			}
		};
		return StreamSupport.stream(Spliterators.spliteratorUnknownSize(
				fibonacciIterator, Spliterator.ORDERED | Spliterator.NONNULL
						| Spliterator.SORTED), false);
	}

}
